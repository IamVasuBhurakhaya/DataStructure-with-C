) De queue
#include <stdio.h>
#include <stdlib.h>
typedef struct Deque {
 int* data;
 int front;
 int back;
 int size;
 int capacity;
} Deque;
Deque* createDeque(int initialCapacity) {
 Deque* dq = (Deque*)malloc(sizeof(Deque));
 dq->data = (int*)malloc(sizeof(int) * initialCapacity);
 dq->front = 0;
 dq->back = 0;
 dq->size = 0;
 dq->capacity = initialCapacity;
 return dq;
}
void resizeDeque(Deque* dq) {
 int newCapacity = dq->capacity * 2;
 int* newData = (int*)malloc(sizeof(int) * newCapacity);
 for (int i = 0; i < dq->size; i++) {
 newData[i] = dq->data[(dq->front + i) % dq->capacity];
 }
 free(dq->data);
 dq->data = newData;
 dq->front = 0;
 dq->back = dq->size;
 dq->capacity = newCapacity;
}
void pushBack(Deque* dq, int value) {
 if (dq->size == dq->capacity) {
 resizeDeque(dq);
 }
 dq->data[dq->back] = value;
 dq->back = (dq->back + 1) % dq->capacity;
 dq->size++;
}
void pushFront(Deque* dq, int value) {
 if (dq->size == dq->capacity) {
 resizeDeque(dq);
 }
 dq->front = (dq->front - 1 + dq->capacity) % dq->capacity;
 dq->data[dq->front] = value;
 dq->size++;
}
void popBack(Deque* dq) {
 if (dq->size > 0) {
 dq->back = (dq->back - 1 + dq->capacity) % dq->capacity;
 dq->size--;
 }
}
void printDeque(Deque* dq) {
 printf("Deque: ");
 for (int i = 0; i < dq->size; i++) {
 printf("%d ", dq->data[(dq->front + i) % dq->capacity]);
 }
 printf("\n");
}
void freeDeque(Deque* dq) {
 free(dq->data);
 free(dq);
}
int main() {
 Deque* dq = createDeque(4);
 // Adding elements to the back
 pushBack(dq, 10);
 pushBack(dq, 20);
 pushBack(dq, 30);

 // Adding elements to the front
 pushFront(dq, 0);
 pushFront(dq, -10);
 // Print the deque
 printf("Deque after additions: ");
 printDeque(dq);
 // Remove elements from the back
 popBack(dq);
 // Remove elements from the front
 popFront(dq);
 // Print the deque after removals
 printf("Deque after removals: ");
 printDeque(dq);
 // Add more elements to both ends
 pushBack(dq, 40);
 pushFront(dq, -20);
 // Print the final state of the deque
 printf("Final deque: ");
 printDeque(dq);
 // Free allocated memory
 freeDeque(dq);
 return 0;
}